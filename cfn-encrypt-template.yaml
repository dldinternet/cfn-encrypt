Outputs:
  EncryptLambdaArn:
    Description: Encrypt lambda arn
    Export:
      Name: !Sub '${AWS::StackName}-EncryptLambdaArn'
    Value: !GetAtt 'EncryptLambda.Arn'
  EncryptedValue:
    Description: Encrypted value, base64 encoded
    Value: !GetAtt 'MyEncryptedValue.CiphertextBase64'
  EncryptedValueWithContext:
    Description: Encrypted value, base64 encoded
    Value: !GetAtt 'MyEncryptedValueWithContext.CiphertextBase64'
  GetSsmValueLambdaArn:
    Description: get ssm value lambda arn
    Export:
      Name: !Sub '${AWS::StackName}-GetSsmValueLambdaArn'
    Value: !GetAtt 'GetSsmValueLambda.Arn'
  KmsKeyArn:
    Description: My secure parameter name
    Export:
      Name: !Sub '${AWS::StackName}-KmsKeyArn'
    Value: !Ref 'KmsKeyArn'
  MyDecryptedValueValue:
    Value: !GetAtt 'MyDecryptedValue.Value'
  MyDecryptedValueVersion:
    Value: !GetAtt 'MyDecryptedValue.Version'
  MySecureParameter:
    Description: My secure parameter name
    Value: !Ref 'MySecureParameter'
  SsmParameterLambdaArn:
    Description: Ssm parameter lambda arn
    Export:
      Name: !Sub '${AWS::StackName}-SsmParameterLambdaArn'
    Value: !GetAtt 'SsmParameterLambda.Arn'
Parameters:
  KmsKeyArn:
    Description: KMS alias ARN for lambda
    Type: String
  PlainText:
    Default: Hello World
    Description: Text that you want to encrypt ( Hello World )
    NoEcho: true
    Type: String
Resources:
  EncryptLambda:
    DependsOn:
      - LogGroupSimple
    Properties:
      Code:
        ZipFile: !Join
          - "\n"
          - - import cfnresponse, logging, traceback, boto3, base64
            - ''
            - ''
            - 'def handler(event, context):'
            - '    logger = logging.getLogger("crypto_cfn")'
            - '    logger.setLevel(logging.DEBUG)'
            - '    ch = logging.StreamHandler()'
            - '    logger.addHandler(ch)'
            - '    try:'
            - '        args = dict()'
            - ''
            - '        if event["ResourceProperties"].get("EncryptionContext") is
              not None:'
            - '            args["EncryptionContext"] = {'
            - '                event["ResourceProperties"].get("EncryptionContext")["Name"]:'
            - '                    event["ResourceProperties"].get("EncryptionContext")["Value"]'
            - '            }'
            - ''
            - '        args["KeyId"] = event["ResourceProperties"]["KmsKeyArn"]'
            - '        args["Plaintext"] = base64.b64decode(event["ResourceProperties"]["Base64Data"])'
            - ''
            - '        if event["RequestType"] in ["Create", "Update"]:'
            - '            encrypted = boto3.client(''kms'').encrypt(**args)'
            - '            response = dict()'
            - '            response["CiphertextBase64"] = base64.b64encode(encrypted["CiphertextBlob"])'
            - '            response["KeyId"] = encrypted["KeyId"]'
            - '            strresponse = dict()'
            - '            for k,v in response.items():'
            - '                if isinstance(v, bytes):'
            - '                    v = v.decode(''utf-8'')'
            - '                strresponse[k] = v'
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, strresponse,
              "1")'
            - '            logger.info("Successfully encrypted value")'
            - '        else:'
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, None,
              "1")'
            - '            logger.info("Successfully deleted")'
            - ''
            - '    except Exception as ex:'
            - '        logger.error("Failed to encrypt value: %s", str(ex))'
            - '        logger.debug("Stack trace %s", traceback.format_exc())'
            - ''
            - '        if event["RequestType"] in ["Create", "Update"]:'
            - '            cfnresponse.send(event, context, cfnresponse.FAILED, None,
              "0")'
            - '        else:'
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, None,
              "0")'
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - simple
      Handler: index.handler
      MemorySize: 1536
      Role: !GetAtt 'EncryptLambdaRole.Arn'
      Runtime: python3.7
      Timeout: 300
    Type: AWS::Lambda::Function
  EncryptLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kms:Encrypt
                Effect: Allow
                Resource:
                  - !Ref 'KmsKeyArn'
            Version: '2012-10-17'
          PolicyName: encrypt
    Type: AWS::IAM::Role
  GetSsmValueLambda:
    DependsOn:
      - LogGroupGetSsmValue
    Properties:
      Code:
        ZipFile: !Join
          - "\n"
          - - import cfnresponse, logging, traceback, boto3, datetime, json
            - from dateutil.tz import tzlocal
            - ''
            - ''
            - 'def parameter_exist(name):'
            - '    response = boto3.client(''ssm'').describe_parameters('
            - '        ParameterFilters=[{'
            - '            ''Key'': ''Name'','
            - '            ''Values'': ['
            - '                name'
            - '            ]'
            - '        }]'
            - '    )'
            - '    return len(response["Parameters"]) > 0'
            - ''
            - ''
            - 'def date_2_string(o):'
            - '    if isinstance(o, datetime.datetime):'
            - '        return o.__str__()'
            - ''
            - ''
            - 'def handler(event, context):'
            - '    logger = logging.getLogger("crypto_cfn")'
            - '    logger.setLevel(logging.DEBUG)'
            - '    ch = logging.StreamHandler()'
            - '    logger.addHandler(ch)'
            - '    name = event["ResourceProperties"]["Name"]'
            - '    try:'
            - ''
            - '        if event["RequestType"] in ["Create", "Update"]:'
            - '            if not parameter_exist(name):'
            - '                raise NameError("A Parameter named {} does not exists".format(name))'
            - ''
            - '            response = boto3.client(''ssm'').get_parameter_history('
            - '                Name=name,'
            - '                WithDecryption=True,'
            - '            )'
            - ''
            - '            ret_value = None'
            - '            if event["ResourceProperties"].get("Version") is not None:'
            - '                for param in response["Parameters"]:'
            - '                    if param["Version"] == int(event["ResourceProperties"].get("Version")):'
            - '                        ret_value = param'
            - '                        break'
            - '            else:'
            - '                ret_value = response["Parameters"][-1]'
            - ''
            - '            if ret_value is None:'
            - '                raise LookupError("Parameter not found")'
            - '            logger.info("Successfully retrieved parameter {}".format(name))'
            - ''
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS,'
            - '                             json.loads(json.dumps(ret_value, default=date_2_string)),'
            - '                             name + str(ret_value["Version"]), noEcho=True)'
            - '        else:'
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, None,
              name, noEcho=True)'
            - ''
            - '    except Exception as ex:'
            - '        logger.error("Failed get parameter value: %s", name)'
            - '        logger.debug("Stack trace %s", traceback.format_exc())'
            - '        if event["RequestType"] in ["Create", "Update"]:'
            - '            cfnresponse.send(event, context, cfnresponse.FAILED, None,
              "0", noEcho=True)'
            - '        else:'
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, None,
              "0", noEcho=True)'
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - get-ssm-value
      Handler: index.handler
      MemorySize: 1536
      Role: !GetAtt 'GetSsmValueRole.Arn'
      Runtime: python3.7
      Timeout: 300
    Type: AWS::Lambda::Function
  GetSsmValueRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource:
                  - !Ref 'KmsKeyArn'
            Version: '2012-10-17'
          PolicyName: decrypt
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:GetParameterHistory
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ssm:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :parameter/*
              - Action:
                  - ssm:DescribeParameters
                Effect: Allow
                Resource:
                  - '*'
            Version: '2012-10-17'
          PolicyName: ssm
    Type: AWS::IAM::Role
  LogGroupGetSsmValue:
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - get-ssm-value
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupSimple:
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - simple
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  LogGroupSsm:
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - ssm
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  MyDecryptedValue:
    Properties:
      KeyId: !Ref 'KmsKeyArn'
      Name: !Ref 'MySecureParameter'
      ServiceToken: !GetAtt 'GetSsmValueLambda.Arn'
      Version: !GetAtt 'MySecureParameter.Version'
    Type: Custom::GetSsmValue
  MyEncryptedValue:
    Properties:
      Base64Data: !Base64
        Ref: PlainText
      KmsKeyArn: !Ref 'KmsKeyArn'
      ServiceToken: !GetAtt 'EncryptLambda.Arn'
    Type: Custom::Encrypt
  MyEncryptedValueWithContext:
    Properties:
      Base64Data: !Base64
        Ref: PlainText
      EncryptionContext:
        Name: Test
        Value: Test
      KmsKeyArn: !Ref 'KmsKeyArn'
      ServiceToken: !GetAtt 'EncryptLambda.Arn'
    Type: Custom::Encrypt
  MySecureParameter:
    Properties:
      Description: Testing secure parameter
      KeyId: !Ref 'KmsKeyArn'
      Name: MySecureParameter
      ServiceToken: !GetAtt 'SsmParameterLambda.Arn'
      Value: !Ref 'PlainText'
    Type: Custom::SecureParameter
  SsmLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - kms:Encrypt
                Effect: Allow
                Resource:
                  - !Ref 'KmsKeyArn'
            Version: '2012-10-17'
          PolicyName: encrypt
        - PolicyDocument:
            Statement:
              - Action:
                  - ssm:PutParameter
                  - ssm:DeleteParameter
                Effect: Allow
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:ssm:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :parameter/*
              - Action:
                  - ssm:DescribeParameters
                Effect: Allow
                Resource:
                  - '*'
            Version: '2012-10-17'
          PolicyName: ssm
    Type: AWS::IAM::Role
  SsmParameterLambda:
    DependsOn:
      - LogGroupSsm
    Properties:
      Code:
        ZipFile: !Join
          - "\n"
          - - import cfnresponse, logging, traceback, boto3
            - from random import choice
            - from string import ascii_uppercase, ascii_lowercase, digits
            - ''
            - ''
            - 'def parameter_exist(name):'
            - '    response = boto3.client(''ssm'').describe_parameters('
            - '        ParameterFilters=[{'
            - '            ''Key'': ''Name'','
            - '            ''Values'': ['
            - '                name'
            - '            ]'
            - '        }]'
            - '    )'
            - '    return len(response["Parameters"]) > 0'
            - ''
            - ''
            - 'def handler(event, context):'
            - '    logger = logging.getLogger("crypto_cfn")'
            - '    logger.setLevel(logging.DEBUG)'
            - '    ch = logging.StreamHandler()'
            - '    logger.addHandler(ch)'
            - '    name = event["ResourceProperties"]["Name"]'
            - '    value = None'
            - ''
            - '    try:'
            - '        if event["RequestType"] in ["Create", "Update"]:'
            - '            if event["RequestType"] == "Create" and parameter_exist(name):'
            - '                raise NameError("A Parameter named {} already exists".format(name))'
            - ''
            - '            generate_password = event["ResourceProperties"]["GeneratePassword"]
              if "GeneratePassword" in event["ResourceProperties"] else None'
            - '            value = event["ResourceProperties"]["Value"] if "Value"
              in event["ResourceProperties"] else None'
            - ''
            - '            if value and generate_password in [''true'', ''True'',
              ''1'', True, 1]:'
            - '                raise ValueError("Property Value and GeneratePassword
              cannot be used at the same time")'
            - ''
            - '            if generate_password in [''true'', ''True'', ''1'', True,
              1]:'
            - ''
            - '                password_length = event["ResourceProperties"]["GeneratePasswordLength"]
              if "GeneratePasswordLength" in event["ResourceProperties"] else None'
            - '                allow_specials = event["ResourceProperties"]["GeneratePasswordAllowSpecialCharacters"]
              if "GeneratePasswordAllowSpecialCharacters" in event["ResourceProperties"]
              else None'
            - '                if not password_length:'
            - '                    raise ValueError("The Resource property GeneratePasswordLength
              is required")'
            - ''
            - '                try:'
            - '                    password_length = int(password_length)'
            - '                except:'
            - '                    raise ValueError("The Resource property GeneratePasswordLength
              must be an integer or castable to an integer")'
            - ''
            - ''
            - '                charset = ascii_uppercase + ascii_lowercase + digits'
            - '                if allow_specials and allow_specials in [''true'',
              ''True'', ''1'', True, 1]:'
            - '                    charset = charset + "!\"#$%&''()*+,-./:;<=>?@[\]^_`{|}~"'
            - ''
            - '                value = ''''.join(choice(charset) for i in range(password_length))'
            - ''
            - '            if not value:'
            - '                raise ValueError("Either generate a password or set
              a value")'
            - ''
            - '            response = boto3.client(''ssm'').put_parameter('
            - '                Name=name,'
            - '                Description=event["ResourceProperties"]["Description"],'
            - '                Value=value,'
            - '                Type="SecureString",'
            - '                KeyId=event["ResourceProperties"]["KeyId"],'
            - '                Overwrite=True'
            - '            )'
            - ''
            - '            logger.info("Successfully stored parameter {}".format(name))'
            - ''
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, response,
              name)'
            - '        else:'
            - '            boto3.client(''ssm'').delete_parameter('
            - '                Name=event["PhysicalResourceId"],'
            - '            )'
            - '            logger.info("Successfully deleted parameter: {}".format(name))'
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, None,
              name)'
            - ''
            - '    except Exception as ex:'
            - '        logger.error("Failed to %s parameter: %s", event["RequestType"],
              name)'
            - '        logger.debug("Stack trace %s", traceback.format_exc())'
            - '        if event["RequestType"] in ["Create", "Update"]:'
            - '            cfnresponse.send(event, context, cfnresponse.FAILED, None,
              "0")'
            - '        else:'
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, None,
              "0")'
      FunctionName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ssm
      Handler: index.handler
      MemorySize: 1536
      Role: !GetAtt 'SsmLambdaRole.Arn'
      Runtime: python3.7
      Timeout: 300
    Type: AWS::Lambda::Function

